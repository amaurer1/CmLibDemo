//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CustomEdit.h
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Copyright (c) 2020 Adrian Maurer. All rights reserved.
// Distributed under the MIT software license (http://www.opensource.org/licenses/mit-license.php).
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Function.h"
#include <array>
#include <optional>
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CTextEdit
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CTextEdit : public CEdit
{
// ELEMENT DATA
private:
	bool avoidChangeHandler;

// CONSTRUCTION / DESTRUCTION / ASSIGNMENT
public:
	CTextEdit() : CEdit(), avoidChangeHandler(false) {}

// ELEMENT FUNCTIONS
public:
	void setText(LPCTSTR);

// MESSAGE MAP FUNCTIONS
protected:
	afx_msg BOOL OnEnChange();
	DECLARE_MESSAGE_MAP()
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TNumberEdit
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
class TNumberEdit : public CTextEdit
{
// ELEMENT DATA
private:
	const CString format;
	bool undefined;
	bool limited;
	T minVal;
	T maxVal;
	mutable CString text;

// CONSTRUCTION / DESTRUCTION / ASSIGNMENT
public:
	TNumberEdit();
	TNumberEdit(const int);
	TNumberEdit(const T, const T);
	TNumberEdit(const int, const T, const T);

// ELEMENT FUNCTIONS
private:
	CString getFormat() const;
	CString getFormat(const int) const;
	T calcLimit(const T) const;
public:
	void setLimits(const T, const T);
	void setLimits(const std::array<T, 2>&);
	void setValue();
	void setValue(const T);
	void setValue(const std::optional<T>);
	T getValue() const;
	std::optional<T> getOptionalValue() const;
	void increment(const T);
	void decrement(const T);

// MESSAGE MAP FUNCTIONS
protected:
	afx_msg void OnKillFocus(CWnd*);
	afx_msg BOOL OnEnChange();
	DECLARE_MESSAGE_MAP()
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TNumberEdit - CONSTRUCTION / DESTRUCTION / ASSIGNMENT
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TNumberEdit<T>::TNumberEdit() : 
	CTextEdit(), 
	format(getFormat()), 
	undefined(false), 
	limited(false), 
	minVal(T(0)), 
	maxVal(T(0)), 
	text()
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TNumberEdit<T>::TNumberEdit(const int s) : 
	CTextEdit(), 
	format(getFormat(s)), 
	undefined(false), 
	limited(false), 
	minVal(0.0), 
	maxVal(0.0), 
	text()
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TNumberEdit<T>::TNumberEdit(const T v1, const T v2) : 
	CTextEdit(), 
	format(getFormat()), 
	undefined(false), 
	limited(v1 < v2), 
	minVal(v1), 
	maxVal(v2), 
	text()
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TNumberEdit<T>::TNumberEdit(const int s, const T v1, const T v2) : 
	CTextEdit(), 
	format(getFormat(s)), 
	undefined(false), 
	limited(v1 < v2), 
	minVal(v1), 
	maxVal(v2), 
	text()
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TNumberEdit - ELEMENT FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <>
inline CString TNumberEdit<int>::getFormat() const
{
	return CString(L"%d");
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <>
inline CString TNumberEdit<float>::getFormat() const
{
	return CString(L"%.7g");
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <>
inline CString TNumberEdit<double>::getFormat() const
{
	return CString(L"%.15g");
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline CString TNumberEdit<T>::getFormat(const int s) const
{
	CString f;
	f.Format(L"%%.%dg", s);
	return f;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline T TNumberEdit<T>::calcLimit(const T v) const
{
	return limited ? limit(v, minVal, maxVal) : v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TNumberEdit<T>::setLimits(const T v1, const T v2)
{
	limited = true;
	minVal = v1;
	maxVal = v2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TNumberEdit<T>::setLimits(const std::array<T, 2>& va)
{
	setLimits(va[0], va[1]);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TNumberEdit<T>::setValue()
{
	undefined = true;
	setText(L"");
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TNumberEdit<T>::setValue(const T v)
{
	undefined = false;
	text.Format(format, calcLimit(v));
	setText(text);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TNumberEdit<T>::setValue(const std::optional<T> v)
{
	v ? setValue(*v) : setValue();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <>
inline int TNumberEdit<int>::getValue() const
{
	GetWindowText(text);
	return calcLimit(_wtoi(text));
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <>
inline float TNumberEdit<float>::getValue() const
{
	GetWindowText(text);
	return calcLimit(static_cast<float>(_wtof(text)));
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <>
inline double TNumberEdit<double>::getValue() const
{
	GetWindowText(text);
	return calcLimit(_wtof(text));
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline std::optional<T> TNumberEdit<T>::getOptionalValue() const
{
	return undefined ? std::nullopt : std::optional<T>(getValue());
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TNumberEdit<T>::increment(const T i)
{
	if (!undefined)
	{
		const T v = getValue() + i;
		text.Format(format, calcLimit(v));
		SetWindowText(text);
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TNumberEdit<T>::decrement(const T i)
{
	if (!undefined)
	{
		const T v = getValue() - i;
		text.Format(format, calcLimit(v));
		SetWindowText(text);
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TNumberEdit - MESSAGE MAP FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BEGIN_TEMPLATE_MESSAGE_MAP(TNumberEdit, T, CTextEdit)
	ON_WM_KILLFOCUS()
	ON_CONTROL_REFLECT_EX(EN_CHANGE, &TNumberEdit::OnEnChange)
END_MESSAGE_MAP()
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TNumberEdit<T>::OnKillFocus(CWnd* p_newWnd)
{
	CTextEdit::OnKillFocus(p_newWnd);
	undefined ? setText(L"") : setValue(getValue());
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline BOOL TNumberEdit<T>::OnEnChange()
{
	if (CTextEdit::OnEnChange())
	{
		return TRUE;
	}
	else
	{
		undefined = false;
		return FALSE;
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TScrollEdit
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
class TScrollEdit : public TNumberEdit<T>
{
// ELEMENT DATA
private:
	T inc1;
	T inc2;

// CONSTRUCTION / DESTRUCTION / ASSIGNMENT
public:
	TScrollEdit(const T, const T);
	TScrollEdit(const int, const T, const T);
	TScrollEdit(const T, const T, const T, const T);
	TScrollEdit(const int, const T, const T, const T, const T);
	
// ELEMENT FUNCTIONS
public:
	void setIncrements(const T, const T);

// MESSAGE MAP FUNCTIONS
protected:
	afx_msg BOOL OnMouseWheel(UINT, short, CPoint);
	afx_msg void OnKeyDown(UINT, UINT, UINT);
	DECLARE_MESSAGE_MAP()
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TScrollEdit
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TScrollEdit - CONSTRUCTION / DESTRUCTION / ASSIGNMENT
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TScrollEdit<T>::TScrollEdit(const T i1, const T i2) : 
	TNumberEdit(), 
	inc1(i1), 
	inc2(i2)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TScrollEdit<T>::TScrollEdit(const int s, const T i1, const T i2) : 
	TNumberEdit(s), 
	inc1(i1), 
	inc2(i2)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TScrollEdit<T>::TScrollEdit(const T v1, const T v2, const T i1, const T i2) : 
	TNumberEdit(v1, v2), 
	inc1(i1), 
	inc2(i2)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TScrollEdit<T>::TScrollEdit(const int s, const T v1, const T v2, const T i1, const T i2) : 
	TNumberEdit(s, v1, v2), 
	inc1(i1), 
	inc2(i2)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TScrollEdit - ELEMENT FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template<class T>
inline void TScrollEdit<T>::setIncrements(const T i1, const T i2)
{
	inc1 = i1;
	inc2 = i2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TScrollEdit - MESSAGE MAP FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BEGIN_TEMPLATE_MESSAGE_MAP(TScrollEdit, T, TNumberEdit)
	ON_WM_KEYDOWN()
	ON_WM_MOUSEWHEEL()
END_MESSAGE_MAP()
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline void TScrollEdit<T>::OnKeyDown(UINT ch, UINT repCnt, UINT flags)
{
	const bool shift = HIWORD(::GetKeyState(VK_SHIFT));
	const T& w = shift ? inc2 : inc1;
	if (ch == VK_UP) increment(w);
	else if (ch == VK_DOWN) decrement(w);
	else TNumberEdit::OnKeyDown(ch, repCnt, flags);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline BOOL TScrollEdit<T>::OnMouseWheel(UINT flags, short delta, CPoint pt)
{
	const T& w = flags & MK_SHIFT ? inc2 : inc1;
	delta < 0 ? decrement(w) : increment(w);
	return TNumberEdit::OnMouseWheel(flags, delta, pt);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
